// Generated by gencpp from file my_project_msgs/Data.msg
// DO NOT EDIT!


#ifndef MY_PROJECT_MSGS_MESSAGE_DATA_H
#define MY_PROJECT_MSGS_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_project_msgs
{
template <class ContainerAllocator>
struct Data_
{
  typedef Data_<ContainerAllocator> Type;

  Data_()
    : Yaw_odom(0.0)
    , Yaw_mpu(0.0)
    , Yaw_combinado(0.0)
    , dist(0.0)
    , psi(0.0)  {
    }
  Data_(const ContainerAllocator& _alloc)
    : Yaw_odom(0.0)
    , Yaw_mpu(0.0)
    , Yaw_combinado(0.0)
    , dist(0.0)
    , psi(0.0)  {
  (void)_alloc;
    }



   typedef double _Yaw_odom_type;
  _Yaw_odom_type Yaw_odom;

   typedef double _Yaw_mpu_type;
  _Yaw_mpu_type Yaw_mpu;

   typedef double _Yaw_combinado_type;
  _Yaw_combinado_type Yaw_combinado;

   typedef double _dist_type;
  _dist_type dist;

   typedef double _psi_type;
  _psi_type psi;





  typedef boost::shared_ptr< ::my_project_msgs::Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_project_msgs::Data_<ContainerAllocator> const> ConstPtr;

}; // struct Data_

typedef ::my_project_msgs::Data_<std::allocator<void> > Data;

typedef boost::shared_ptr< ::my_project_msgs::Data > DataPtr;
typedef boost::shared_ptr< ::my_project_msgs::Data const> DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_project_msgs::Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_project_msgs::Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_project_msgs::Data_<ContainerAllocator1> & lhs, const ::my_project_msgs::Data_<ContainerAllocator2> & rhs)
{
  return lhs.Yaw_odom == rhs.Yaw_odom &&
    lhs.Yaw_mpu == rhs.Yaw_mpu &&
    lhs.Yaw_combinado == rhs.Yaw_combinado &&
    lhs.dist == rhs.dist &&
    lhs.psi == rhs.psi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_project_msgs::Data_<ContainerAllocator1> & lhs, const ::my_project_msgs::Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_project_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::my_project_msgs::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_project_msgs::Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_project_msgs::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_project_msgs::Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_msgs::Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_project_msgs::Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_project_msgs::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3376fc8753ba296918120944d2f95a14";
  }

  static const char* value(const ::my_project_msgs::Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3376fc8753ba2969ULL;
  static const uint64_t static_value2 = 0x18120944d2f95a14ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_project_msgs::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_project_msgs/Data";
  }

  static const char* value(const ::my_project_msgs::Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_project_msgs::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Yaw_odom\n"
"float64 Yaw_mpu\n"
"float64 Yaw_combinado\n"
"float64 dist\n"
"float64 psi\n"
;
  }

  static const char* value(const ::my_project_msgs::Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_project_msgs::Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Yaw_odom);
      stream.next(m.Yaw_mpu);
      stream.next(m.Yaw_combinado);
      stream.next(m.dist);
      stream.next(m.psi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_project_msgs::Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_project_msgs::Data_<ContainerAllocator>& v)
  {
    s << indent << "Yaw_odom: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw_odom);
    s << indent << "Yaw_mpu: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw_mpu);
    s << indent << "Yaw_combinado: ";
    Printer<double>::stream(s, indent + "  ", v.Yaw_combinado);
    s << indent << "dist: ";
    Printer<double>::stream(s, indent + "  ", v.dist);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_PROJECT_MSGS_MESSAGE_DATA_H
